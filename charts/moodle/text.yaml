NAME: my-release
LAST DEPLOYED: Fri Jul 22 13:08:28 2022
NAMESPACE: hrachovec-ns
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
affinity: {}
allowEmptyPassword: false
args: []
certificates:
  args: []
  command: []
  customCAs: []
  customCertificate:
    certificateLocation: /etc/ssl/certs/ssl-cert-snakeoil.pem
    certificateSecret: ""
    chainLocation: /etc/ssl/certs/mychain.pem
    chainSecret:
      key: ""
      name: ""
    keyLocation: /etc/ssl/private/ssl-cert-snakeoil.key
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r14
command: []
commonAnnotations: {}
commonLabels: {}
containerPorts:
  http: 8080
  https: 8443
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
existingSecret: ""
externalDatabase:
  database: bitnami_moodle
  existingSecret: ""
  host: ""
  password: ""
  port: 3306
  type: ""
  user: bn_moodle
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
  storageClass: ""
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/moodle
  tag: 4.0.2-debian-11-r0
ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  apiVersion: ""
  enabled: true
  extraHosts: []
  extraPaths: []
  extraRules: []
  hostname: moodle.dyn.cloud.e-infra.cz
  ingressClassName: ""
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: true
initContainers: []
kubeVersion: ""
lifecycleHooks: ""
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 600
  path: /login/index.php
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
mariadb:
  architecture: standalone
  auth:
    database: bitnami_moodle
    password: ""
    rootPassword: ""
    username: bn_moodle
  enabled: true
  primary:
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: false
      existingClaim: ""
      hostPath: ""
      size: 8Gi
      storageClass: nfs-csi
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/apache-exporter
    tag: 0.11.0-debian-11-r14
  podAnnotations:
    prometheus.io/port: '{{ .Values.metrics.service.port }}'
    prometheus.io/scrape: "true"
  resources: {}
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.port }}'
      prometheus.io/scrape: "true"
    clusterIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    port: 9117
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: LoadBalancer
moodleEmail: user@example.com
moodlePassword: ""
moodleSiteName: ""
moodleSkipInstall: false
moodleUsername: user
nameOverride: ""
networkPolicy:
  egressRules:
    customRules: {}
    denyConnectionsToExternal: false
  enabled: false
  ingress:
    enabled: true
    namespaceSelector: {}
    podSelector: {}
  ingressRules:
    accessOnlyFrom:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
    backendOnlyAccessibleByFrontend: false
    customBackendSelector: {}
    customRules: {}
  metrics:
    enabled: false
    namespaceSelector: {}
    podSelector: {}
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
persistence:
  accessModes:
  - ReadWriteOnce
  annotations: {}
  customStorageClass: {}
  enabled: true
  existingClaim: ""
  hostPath: ""
  size: 8Gi
  storageClass: nfs-csi
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
  enabled: true
  fsGroup: 1001
priorityClassName: ""
readinessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 30
  path: /login/index.php
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 3
replicaCount: 1
resources:
  limits: {}
  requests:
    cpu: 300m
    memory: 512Mi
schedulerName: ""
service:
  annotations: {}
  clusterIP: ""
  externalTrafficPolicy: Cluster
  extraPorts: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  nodePorts:
    http: ""
    https: ""
  ports:
    http: 80
    https: 443
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
sessionAffinity: None
sidecars: []
smtpHost: ""
smtpPassword: ""
smtpPort: ""
smtpProtocol: ""
smtpUser: ""
startupProbe:
  enabled: false
  failureThreshold: 60
  initialDelaySeconds: 30
  path: /login/index.php
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
tolerations: []
topologySpreadConstraints: []
updateStrategy:
  type: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r14
  resources:
    limits: {}
    requests: {}

COMPUTED VALUES:
affinity: {}
allowEmptyPassword: false
args: []
certificates:
  args: []
  command: []
  customCAs: []
  customCertificate:
    certificateLocation: /etc/ssl/certs/ssl-cert-snakeoil.pem
    certificateSecret: ""
    chainLocation: /etc/ssl/certs/mychain.pem
    chainSecret:
      key: ""
      name: ""
    keyLocation: /etc/ssl/private/ssl-cert-snakeoil.key
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r14
command: []
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
commonAnnotations: {}
commonLabels: {}
containerPorts:
  http: 8080
  https: 8443
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
existingSecret: ""
externalDatabase:
  database: bitnami_moodle
  existingSecret: ""
  host: ""
  password: ""
  port: 3306
  type: ""
  user: bn_moodle
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
  storageClass: ""
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/moodle
  tag: 4.0.2-debian-11-r0
ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  apiVersion: ""
  enabled: true
  extraHosts: []
  extraPaths: []
  extraRules: []
  hostname: moodle.dyn.cloud.e-infra.cz
  ingressClassName: ""
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: true
initContainers: []
kubeVersion: ""
lifecycleHooks: ""
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 600
  path: /login/index.php
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
mariadb:
  architecture: standalone
  auth:
    customPasswordFiles: {}
    database: bitnami_moodle
    existingSecret: ""
    forcePassword: false
    password: ""
    replicationPassword: ""
    replicationUser: replicator
    rootPassword: ""
    usePasswordFiles: false
    username: bn_moodle
  clusterDomain: cluster.local
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mariadb
    tag: 10.6.8-debian-11-r9
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  kubeVersion: ""
  metrics:
    annotations:
      prometheus.io/port: "9104"
      prometheus.io/scrape: "true"
    containerSecurityContext:
      enabled: false
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    extraVolumeMounts:
      primary: []
      secondary: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.14.0-debian-11-r9
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  networkPolicy:
    egressRules:
      customRules: {}
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      secondaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  primary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      plugin_dir=/opt/bitnami/mariadb/plugin
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mariadb/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: false
      existingClaim: ""
      hostPath: ""
      selector: {}
      size: 8Gi
      storageClass: nfs-csi
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    revisionHistoryLimit: 10
    rollingUpdatePartition: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 120
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    startupWaitOptions: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  rbac:
    create: false
  schedulerName: ""
  secondary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    revisionHistoryLimit: 10
    rollingUpdatePartition: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 120
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    startupWaitOptions: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    name: ""
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r10
    resources:
      limits: {}
      requests: {}
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/apache-exporter
    tag: 0.11.0-debian-11-r14
  podAnnotations:
    prometheus.io/port: '{{ .Values.metrics.service.port }}'
    prometheus.io/scrape: "true"
  resources: {}
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.port }}'
      prometheus.io/scrape: "true"
    clusterIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    port: 9117
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: LoadBalancer
moodleEmail: user@example.com
moodlePassword: ""
moodleSiteName: ""
moodleSkipInstall: false
moodleUsername: user
nameOverride: ""
networkPolicy:
  egressRules:
    customRules: {}
    denyConnectionsToExternal: false
  enabled: false
  ingress:
    enabled: true
    namespaceSelector: {}
    podSelector: {}
  ingressRules:
    accessOnlyFrom:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
    backendOnlyAccessibleByFrontend: false
    customBackendSelector: {}
    customRules: {}
  metrics:
    enabled: false
    namespaceSelector: {}
    podSelector: {}
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
persistence:
  accessModes:
  - ReadWriteOnce
  annotations: {}
  customStorageClass: {}
  enabled: true
  existingClaim: ""
  hostPath: ""
  size: 8Gi
  storageClass: nfs-csi
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
  enabled: true
  fsGroup: 1001
priorityClassName: ""
readinessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 30
  path: /login/index.php
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 3
replicaCount: 1
resources:
  limits: {}
  requests:
    cpu: 300m
    memory: 512Mi
schedulerName: ""
service:
  annotations: {}
  clusterIP: ""
  externalTrafficPolicy: Cluster
  extraPorts: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  nodePorts:
    http: ""
    https: ""
  ports:
    http: 80
    https: 443
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
sessionAffinity: None
sidecars: []
smtpHost: ""
smtpPassword: ""
smtpPort: ""
smtpProtocol: ""
smtpUser: ""
startupProbe:
  enabled: false
  failureThreshold: 60
  initialDelaySeconds: 30
  path: /login/index.php
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
tolerations: []
topologySpreadConstraints: []
updateStrategy:
  type: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r14
  resources:
    limits: {}
    requests: {}

HOOKS:
MANIFEST:
---
# Source: moodle/charts/mariadb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mariadb
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: false
---
# Source: moodle/charts/mariadb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mariadb
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mariadb-root-password: "SG5jWEIydGMyaQ=="
  mariadb-password: "VENKS1Z1dW92Tw=="
---
# Source: moodle/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-moodle
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: moodle
    helm.sh/chart: moodle-14.1.12
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  moodle-password: "RlNJVzRvOVRzSQ=="
---
# Source: moodle/charts/mariadb/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mariadb
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
# Source: moodle/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  
  name: my-release-moodle
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: moodle
    helm.sh/chart: moodle-14.1.12
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
  storageClassName: nfs-csi
---
# Source: moodle/charts/mariadb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mariadb
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: moodle/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-moodle
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: moodle
    helm.sh/chart: moodle-14.1.12
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: http
      nodePort: null
    - name: https
      port: 443
      targetPort: https
      nodePort: null
  selector:
    app.kubernetes.io/name: moodle
    app.kubernetes.io/instance: my-release
---
# Source: moodle/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-moodle
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: moodle
    helm.sh/chart: moodle-14.1.12
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: moodle
      app.kubernetes.io/instance: my-release
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: moodle
        helm.sh/chart: moodle-14.1.12
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
      annotations:
        prometheus.io/port: '9117'
        prometheus.io/scrape: "true"
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: moodle
                    app.kubernetes.io/instance: my-release
                namespaces:
                  - "hrachovec-ns"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      priorityClassName: ""
      hostAliases:
        - ip: "127.0.0.1"
          hostnames:
            - "status.localhost"
      initContainers:
      containers:
        - name: my-release-moodle
          image: docker.io/bitnami/moodle:4.0.2-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: APACHE_HTTP_PORT_NUMBER
              value: "8080"
            - name: APACHE_HTTPS_PORT_NUMBER
              value: "8443"
            - name: MOODLE_DATABASE_TYPE
              value: "mariadb"
            - name: MOODLE_DATABASE_HOST
              value: "my-release-mariadb"
            - name: MOODLE_DATABASE_PORT_NUMBER
              value: "3306"
            - name: MOODLE_DATABASE_NAME
              value: "bitnami_moodle"
            - name: MOODLE_DATABASE_USER
              value: "bn_moodle"
            - name: MOODLE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-password
            - name: MOODLE_SKIP_BOOTSTRAP
              value: "no"
            - name: MOODLE_USERNAME
              value: "user"
            - name: MOODLE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-moodle
                  key: moodle-password
            - name: MOODLE_EMAIL
              value: "user@example.com"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            httpGet:
              path: /login/index.php
              port: http
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /login/index.php
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests:
              cpu: 300m
              memory: 512Mi
          volumeMounts:
            - name: moodle-data
              mountPath: /bitnami/moodle
              subPath: moodle
            - name: moodle-data
              mountPath: /bitnami/moodledata
              subPath: moodledata
      volumes:
        - name: moodle-data
          persistentVolumeClaim:
            claimName: my-release-moodle
---
# Source: moodle/charts/mariadb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-mariadb
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels: 
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  serviceName: my-release-mariadb
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 843babd8d4a2124e46635400d53617d23d84fca5bad9f3d537646244751ff614
      labels:
        app.kubernetes.io/name: mariadb
        helm.sh/chart: mariadb-11.1.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      
      serviceAccountName: my-release-mariadb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "hrachovec-ns"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:10.6.8-debian-11-r9
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-root-password
            - name: MARIADB_USER
              value: "bn_moodle"
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-password
            - name: MARIADB_DATABASE
              value: "bitnami_moodle"
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: my-release-mariadb
        - name: data
          emptyDir: {}
---
# Source: moodle/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-moodle
  namespace: "hrachovec-ns"
  labels:
    app.kubernetes.io/name: moodle
    helm.sh/chart: moodle-14.1.12
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
spec:
  rules:
    - host: moodle.dyn.cloud.e-infra.cz
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-moodle
                port:
                  name: http
  tls:
    - hosts:
        - moodle.dyn.cloud.e-infra.cz
      secretName: moodle-dyn-cloud-e-infra-cz-tls

NOTES:
CHART NAME: moodle
CHART VERSION: 14.1.12
APP VERSION: 4.0.2** Please be patient while the chart is being deployed **

1. Get the Moodle&trade; URL:

  You should be able to access your new Moodle&trade; installation through

  http://moodle.dyn.cloud.e-infra.cz/

2. Get your Moodle&trade; login credentials by running:

  echo Username: user
  echo Password: $(kubectl get secret --namespace hrachovec-ns my-release-moodle -o jsonpath="{.data.moodle-password}" | base64 -d)
