apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  serviceName: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      nodeSelector:
        storage: local-ssd
      securityContext:
        fsGroupChangePolicy: OnRootMismatch
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: init-{{ .Release.Name }}
        image: {{ .Values.image }}
        command: 
        - /bin/sh
        - -c 
        - "cp -rn /home/user/. /home/user2; cp -rn /opt/. /opt2"
        securityContext:
          privileged: false
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
          - name: home
            mountPath: /home/user2
          - name: opt
            mountPath: /opt2
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: Always
        securityContext:                                                          
          runAsUser: 1000 
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        env:
{{- if ne .Values.password "" }}
        - name: PASSWORD
          valueFrom:
           secretKeyRef:
             key: auth
             name: terminal-{{ .Release.Name }}
{{- end }}
{{- if ne .Values.sshkey "" }}
        - name: SSH_KEY
          valueFrom:
           secretKeyRef:
             key: key
             name: sshkey-{{ .Release.Name }}
{{- end }}
        ports:
        - containerPort: 8080
        - containerPort: 2222
        - containerPort: 60000
          protocol: UDP
        resources:
          limits:
            cpu: {{ .Values.maxcpu }}
            memory: {{ .Values.maxram }}
          requests:
            cpu: {{ .Values.mincpu }}
            memory: {{ .Values.minram }}
        volumeMounts:
        - name: home
          mountPath: /home/user
        - name: opt
          mountPath: /opt
{{- if .Values.storage.pvc1.enable }}
        - name: pvc1
          mountPath: /storage1
{{- end }}
{{- if .Values.storage.pvc2.enable }}
        - name: pvc2
          mountPath: /storage2
{{- end }}
{{- if or .Values.storage.pvc1.enable .Values.storage.pvc2.enable }}
      volumes:
{{- if .Values.storage.pvc1.enable }}
      - name: pvc1
        persistentVolumeClaim:
          claimName: {{ .Values.storage.pvc1.claim }}
{{- end }}
{{- if .Values.storage.pvc2.enable }}
      - name: pvc2
        persistentVolumeClaim:
          claimName: {{ .Values.storage.pvc2.claim }}
{{- end }}
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: home
    spec:
      accessModes: [ "ReadWriteMany" ]
      storageClassName: "nfs-csi"
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: opt
    spec:
      accessModes: [ "ReadWriteMany" ]
      storageClassName: "nfs-csi"
      resources:
        requests:
          storage: 1Gi
